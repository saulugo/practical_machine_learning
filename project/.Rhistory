R1
findCorrelation(R1, cutoff= .6, exact= FALSE)
findCorrelation(R1, cutoff= .6)
findCorrelation(R1, cutoff= .6, exact= FALSE)
x1 <- R1[,1]
x2 <- R1[,2]
x3 <- R1[,3]
x4 <- R1[,4]
x5 <- R1[,5]
cor(x1,x4)
R2 <- R1[,-findCorrelation(R1, cutoff= .6, exact= FALSE)]
R2
cor(x1,x2)
cor(x1,x3)
R1
findCorrelation(R1, cutoff= .6)
findCorrelation(R1, cutoff= .8)
findCorrelation(R1, cutoff= .4)
findCorrelation(R1, cutoff= .3)
findCorrelation(R1, cutoff= .2)
findCorrelation(R1, cutoff= .1)
findCorrelation(R1, cutoff= .01)
d <- data.frame(x1=rnorm(10),
x2=rnorm(10),
x3=rnorm(10))
d
cor(d)
names(training)
predictors <- training[,-76]
summary(predictors)
cor_matrix <- cor(predictors)
summary(predictors)
names(small_training_euler)
predictors <- small_training_euler[,-13]
names(small_training_euler)
names(predictors)
cor(predictors)
findCorrelation(cor(predictors), cutoff = 0.75,exact=TRUE)
findCorrelation(cor(predictors), cutoff = 0.75)
findCorrelation(cor(predictors), cutoff = 0.75,exact=FALSE)
findCorrelation(cor(predictors), cutoff = 0.5,exact=FALSE)
training <- read.csv("./data/pml-training.csv")
#eliminating columns with more than 80% of the values in NAs
training <- training[,!colSums(is.na(training))>0.8*nrow(training)]
#transforming to numeric the kurtosis variables
training[,grep("kurtosis",names(training))] <- lapply(training[,grep("kurtosis",names(training))],as.numeric)
#transforming to numeric the skewness variables
training[,grep("skewness",names(training))] <- lapply(training[,grep("skewness",names(training))],as.numeric)
#eliminating the column "skewness_roll_belt.1""
training <- training[,names(training)!="skewness_roll_belt.1"]
#eliminating the variables max_yaw_XXX, min_yaw_XXX, amplitude_yaw_XXX
training <- training[,-grep("max_yaw",names(training))]
training <- training[,-grep("min_yaw",names(training))]
training <- training[,-grep("amplitude_yaw",names(training))]
#eliminating irrelevant variables for the analysis
training <- training[,names(training)!="user_name"]
training <- training[,-grep("timestamp",names(training))]
training <- training[,-grep("window",names(training))]
training <- training[,-1]
dim(training)
summary(training)
names(training)
predictors <- training[,-76]
names(predictors)
cor_matrix <- cor(predictors)
cor_matrix
mim(cor_matrix)
dim(cor_matrix)
col_high_cor <- findCorrelation(predictors, cutoff = .7, verbose = TRUE )
cor_matrix
cor_matrix
summary(cor_matrix)
training <- read.csv("./data/pml-training.csv")
names(training)
training <- training[,8:ncol(training)]
names(training)
predictors <- training[,-151]
cor_matrix <- cor(predictors)
training[,grep("kurtosis",names(training))] <- lapply(training[,grep("kurtosis",names(training))],as.numeric)
#transforming to numeric the skewness variables
training[,grep("skewness",names(training))] <- lapply(training[,grep("skewness",names(training))],as.numeric)
cor_matrix <- cor(predictors)
predictors <- training[,-151]
summary(predictors)
cor_matrix <- cor(predictors)
predictors <- training[,-153]
cor_matrix <- cor(predictors)
training <- read.csv('./data/pml-training.csv')
training[,grep("kurtosis",names(training))] <- lapply(training[,grep("kurtosis",names(training))],as.numeric)
#transforming to numeric the skewness variables
training[,grep("skewness",names(training))] <- lapply(training[,grep("skewness",names(training))],as.numeric)
summary(training)
predictors <- training[,-160]
cor(predictors)
training <- training[,!colSums(is.na(training))>0.8*nrow(training)]
predictors <- training[,-160]
predictors <- training[,-93]
summary(predictors)
cor(predictors)
class(names(predicors))
class(names(predictors))
R1
training <- read.csv('./data/pml-training.csv')
training <- training[,!colSums(is.na(training))>0.8*nrow(training)]
#transforming to numeric the kurtosis variables
training[,grep("kurtosis",names(training))] <- lapply(training[,grep("kurtosis",names(training))],as.numeric)
#transforming to numeric the skewness variables
training[,grep("skewness",names(training))] <- lapply(training[,grep("skewness",names(training))],as.numeric)
#eliminating the column "skewness_roll_belt.1""
training <- training[,names(training)!="skewness_roll_belt.1"]
#eliminating the variables max_yaw_XXX, min_yaw_XXX, amplitude_yaw_XXX
training <- training[,-grep("max_yaw",names(training))]
training <- training[,-grep("min_yaw",names(training))]
training <- training[,-grep("amplitude_yaw",names(training))]
#eliminating irrelevant variables for the analysis
training <- training[,names(training)!="user_name"]
training <- training[,-grep("timestamp",names(training))]
training <- training[,-grep("window",names(training))]
training <- training[,-1]
dim(training)
summary(training)
predictors <- training[,-76]
cor_predictors
cor_matrix <- cor(predictors)
R1
cor_matrix[1,]
cor_matrix[1,]
cor_matrix[2,]
cor_matrix[2,]
cor_matrix[1,]
cor_matrix[75,]
findCorrelation(cor_matrix,cutoff= 0.7,exact=FALSE)
high_cor <- findCorrelation(cor_matrix,cutoff= 0.7,exact=FALSE)
names(predictors[high_cor])
mypredictors <- predictors[,-high_cor]
names(mypredictors)
stopCluster(cluster)
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
fitControl <- trainControl(method = "cv",number=10,allowParallel=TRUE)
y <- training$classe
system.time(model_lowcor <- train(mypredictors,y,method="rf",data=training,trControl=fitControl))
model_lowcor$finalModel
model_lowcor
model_lowcor$finalModel
model_euler$finalModel
model_lowcor
model_euler
pred
predict(model_lowcor,testing)
predict(model_euler,testing)
summary(testing)
testing <- read.csv("./data/pml-testing.csv")
predict(model_euler,testing)
testing <- testing[,!colSums(is.na(testing))>0.8*nrow(testing)]
predict(model_euler,testing)
predict(model_lowcor,testing)
names(testing)
names(predictors)
testing <- testing[,!colSums(is.na(testing))>0.8*nrow(testing)]
testing <- read.csv("./data/pml-testing.csv")
colSums(is.na(testing))
testing$var_total_accel_belt
testing
summary(testing)
summary(testing)
testing <- testing[,!colSums(is.na(testing))>0.8*nrow(testing)]
predict(model_lowcor,testing)
testing <- read.csv("./data/pml-testing.csv")
summary(testing)
predict(model_lowcor,testing)
?aregImpute
mytesting <- testing[,!colSums(is.na(testing))>0.8*nrow(testing)]
predict(model_lowcor,mytesting)
names(mytesting)
names(mytesting)
names(predictors)
mytesting <- testing
mytesting[is.na(mytesting)]
summary(mytesting)
mytesting$stddev_roll_forearm
is.na(mytesting$stddev_roll_forearm)
sum(is.na(mytesting$stddev_roll_forearm))
sum(is.na(mytesting$arm_roll))
summary(testing)
sum(is.na(mytesting$roll_arm))
x <- testing$avg_yaw_forearm
x
x[is.na(x)] <- 0
x
source('~/Coursera/data_science/machine_learning/project/helper.R')
mytesting <- fix_na(testing)
summary(myteting)
summary(mytesting)
predict(model_lowcor,mytesting)
predict(model_euler,mytesting)
library(ggplot2)
qplot(roll_dumbbell,roll_belt,colour=classe,data=training)
qplot(roll_belt,classe,data=training)
names(training)
qplot(roll_belt,classe,data=training)
qplot(roll_dumbbelt,classe,data=training)
qplot(roll_dumbbell,classe,data=training)
qplot(roll_dumbbell,pitch_dumbbell,data=training,colour=classe)
qplot(roll_dumbbell,yaw_dumbbell,data=training,colour=classe)
qplot(roll_dumbbell,roll_belt,data=training,colour=classe)
summary(training$roll_dumbbell)
summary(training$pitch_dumbbell)
summary(training$yaw_dumbbell)
summary(training$roll_belt)
summary(training$pitch_belt)
summary(training$yaw_belt)
qplot(roll_dumbbell,roll_arm,data=training,colour=classe)
qplot(roll_dumbbell,roll_forearm,data=training,colour=classe)
qplot(roll_dumbbell,roll_dumbbell,data=training,colour=classe)
install.packages("plot3D", dependencies = TRUE)
library(plot3D)
data(iris)
head(iris)
x <- sep.1 <- iris$Sepal.Length
y <- pet.1 <- iris$Petal.Length
z <- sep.w <- iris$Sepal.Width
scatter3D(x,y,z,clab=c("Sepal","Width (cm)"))
x <- training$roll_dumbbell
y <- training$pitch_dumbbell
z <- training$yaw_dumbbell
scatter3D(x,y,z,bty="g",pch=18,col.var=training$classe,col=c("red","blue","black"),labels=c("A","B","C","D","E"))
par(mfrow=c(1,1))
scatter3D(x,y,z,bty="g",pch=18,col.var=training$classe,col=c("red","blue","black"),labels=c("A","B","C","D","E"))
as.integer(iris$Species)
as.interger(training$classe)
as.integer(training$classe)
?colkey
with(iris, scatter3D(x = Sepal.Length, y = Sepal.Width,
z = Petal.Length, colvar = as.integer(Species),
col = c("orange", "green", "lightblue"), pch = 16, cex = 2,
clim = c(1, 3), ticktype = "detailed", phi = 20,
xlab = "Sepal Length", ylab = "Sepal Width",
zlab = "Petal Length",  main = "iris",
colkey = list(at = c(1.33, 2, 2.66), side = 1,
addlines = TRUE, length = 0.5, width = 0.5,
labels = c("setosa", "versicolor", "virginica") )))
with(iris, scatter3D(x = Sepal.Length, y = Sepal.Width,
z = Petal.Length, colvar = as.integer(Species),
col = c("orange", "green", "lightblue"), pch = 16, cex = 2,
clim = c(1, 3), ticktype = "detailed", phi = 20,
xlab = "Sepal Length", ylab = "Sepal Width",
zlab = "Petal Length",  main = "iris",
))
with(iris, scatter3D(x = Sepal.Length, y = Sepal.Width,
z = Petal.Length, colvar = as.integer(Species),
col = c("orange", "green", "lightblue"), pch = 16, cex = 2,
clim = c(1, 3), ticktype = "detailed", phi = 20,
xlab = "Sepal Length", ylab = "Sepal Width",
zlab = "Petal Length",  main = "iris",
))
?bty
?scatter3D
with(iris, scatter3D(x = Sepal.Length, y = Sepal.Width,
z = Petal.Length, colvar = as.integer(Species),
col = c("orange", "green", "lightblue"), pch = 16, cex = 2,
clim = c(1, 3), ticktype = "detailed", phi = 20,
xlab = "Sepal Length", ylab = "Sepal Width",
zlab = "Petal Length",  main = "iris"
))
scatter3D(x,y,z,colvar = as.integer(classe),data=training,col=c("green","red","blue","orange","black"),pch=18,cex=1,xlab="roll",ylab="pitch",zlab="yaw",main="Euler Angles in the Dumbbell")
scatter3D(x,y,z,colvar = as.integer(training$classe),col=c("green","red","blue","orange","black"),pch=18,cex=1,xlab="roll",ylab="pitch",zlab="yaw",main="Euler Angles in the Dumbbell")
?scatter3D
scatter3D(x,y,z,colvar = as.integer(training$classe),col=c("green","red","blue","orange","black"),pch=18,cex=1,xlab="roll",ylab="pitch",zlab="yaw",main="Euler Angles in the Dumbbell",phi=60)
scatter3D(x,y,z,colvar = as.integer(training$classe),col=c("green","red","blue","orange","black"),pch=18,cex=1,xlab="roll",ylab="pitch",zlab="yaw",main="Euler Angles in the Dumbbell",phi=20)
scatter3D(x,y,z,colvar = as.integer(training$classe),col=c("green","red","blue","orange","black"),pch=18,cex=1,xlab="roll",ylab="pitch",zlab="yaw",main="Euler Angles in the Dumbbell",phi=20,theta=20)
scatter3D(x,y,z,colvar = as.integer(training$classe),col=c("green","red","blue","orange","black"),pch=18,cex=1,xlab="roll",ylab="pitch",zlab="yaw",main="Euler Angles in the Dumbbell",phi=20,theta=90)
scatter3D(x,y,z,colvar = as.integer(training$classe),col=c("green","red","blue","orange","black"),pch=18,cex=1,xlab="roll",ylab="pitch",zlab="yaw",main="Euler Angles in the Dumbbell",phi=20,theta=20)
scatter3D(x,y,z,colvar = as.integer(training$classe),col=c("green","red","blue","orange","black"),pch=18,cex=1,xlab="roll",ylab="pitch",zlab="yaw",main="Euler Angles in the Dumbbell",phi=20,theta=20,clim=c(-150,150))
scatter3D(x,y,z,colvar = as.integer(training$classe),col=c("green","red","blue","orange","black"),pch=18,cex=1,xlab="roll",ylab="pitch",zlab="yaw",main="Euler Angles in the Dumbbell",phi=20,theta=20)
with(iris, scatter3D(x = Sepal.Length, y = Sepal.Width,
+                      z = Petal.Length, colvar = as.integer(Species),
+                      col = c("orange", "green", "lightblue"), pch = 16, cex = 2,
+                      clim = c(1, 3), ticktype = "detailed", phi = 20,
+                      xlab = "Sepal Length", ylab = "Sepal Width",
+                      zlab = "Petal Length",  main = "iris",
+                      colkey = list(at = c(1.33, 2, 2.66), side = 1,
+                                    addlines = TRUE, length = 0.5, width = 0.5,
+                                    labels = c("setosa", "versicolor", "virginica")
?colkey
with(iris, scatter3D(x = Sepal.Length, y = Sepal.Width,
z = Petal.Length, colvar = as.integer(Species),
col = c("orange", "green", "lightblue"), pch = 16, cex = 2,
clim = c(1, 3), ticktype = "detailed", phi = 20,
xlab = "Sepal Length", ylab = "Sepal Width",
zlab = "Petal Length",  main = "iris",
colkey = list(at = c(1.33, 2, 2.66), side = 1,
addlines = TRUE, length = 0.5, width = 0.5,
labels = c("setosa", "versicolor", "virginica") )))
?scatter3D
scatter3D(x,y,z,colvar=as.factor(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1.33,2,2.66),side = 1,addlines=TRUE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1.33,2,2.66),side = 1,addlines=TRUE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=TRUE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=TRUE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 3,addlines=TRUE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(side =1,addlines=TRUE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell")
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1.33,2,2.66),side = 1,addlines=TRUE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(side = 1,addlines=TRUE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell")
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1.33,2,2.66),side = 1,addlines=TRUE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1.33,2,2.66,3,4),side = 1,addlines=TRUE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1.33,2,2.66),side = 1,addlines=TRUE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1.33,2,2.66),side = 1,addlines=TRUE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1.33,2,2.66),side = 1,addlines=TRUE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
par
par(mar)
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1.33,2,2.66),side = 1,addlines=TRUE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
par(mar=c(5.1,4.1,4.1,2.1))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=40,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=60,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=80,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=60,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=60,theta=60,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=60,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
qplot(pitch_dumbbell,roll_dumbbell,data=training,colour=classe)
?qplot
correct_exe <- ifelse(training$classe=="A",1,0)
summary(training$classe)
summary(correct_exe)
correct_exe <- as.factor(correct_exe)
summary(correc_exe)
summary(correct_exe)
qplot(pitch_dumbbell,roll_dumbbell,data=training,colour=correct_exe)
qplot(pitch_dumbbell,yaw_dumbbell,data=training,colour=correct_exe)
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
qplot(yaw_dumbbell,roll_dumbbell,data=training,colour=correct_exe)
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
qplot(yaw_dumbbell,pitch_dumbbell,data=training,colour=correct_exe)
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=60,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
qplot(roll_dumbbell,pitch_dumbbell,data=training,colour=correct_exe)
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Dumbbell",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
names(predictors)
z <- total_accel_dumbbell
z <- training$total_accel_dumbbell
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="yaw",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="total_accel",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
qplot(roll_dumbbell,total_accel_dumbbell,data=training,colour=correct_exe)
qplot(total_accel_dumbbell,classe,data=training)
names(training)
z <- training$gyros_dumbbell_x
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="gyro_x",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
names(predictors)
z <- training$gyros_dumbbell_y
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="gyro",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
z <- training$gyros_dumbbell_z
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="gyro",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
z <- training$magnet_dumbbell_x
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="variable",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
z <- training$magnet_dumbbell_y
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="variable",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
z <- training$magnet_dumbbell_z
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="variable",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
x <- training$roll_belt
y <- training$pitch_belt
z <- training$yaw_belt
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="variable",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
x <- training$roll_arm
y <- training$pitch_arm
z <- training$yaw_arm
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="variable",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
x <- training$roll_forearm
y <- training$pitch_forearm
z <- training$yaw_forearm
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="variable",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
x <- training$roll_dumbbell
y <- training$pitch_dumbbell
z <- magnet_dumbbell_x
z <- training$magnet_dumbbell_x
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="variable",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
z <- training$magnet_dumbbell_z
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="variable",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
x <- training$roll_arm
y <- training$pitch_arm
z <- training$yaw_arm
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=20,xlab="roll",ylab="pitch",zlab="variable",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
scatter3D(x,y,z,colvar=as.integer(training$classe),col=c("green","red","blue","black","orange"),pch=16,cex=1,clim=c(1,5),ticktype="detailed",phi=20,theta=40,xlab="roll",ylab="pitch",zlab="variable",main="Exercise Execution vs Dumbbell Euler Angles",colkey = list(at = c(1,2,3,4,5),side = 1,addlines=FALSE,length=0.5,width=0.5,labels=c("A","B","C","D","E")))
training <- read.csv("./data/pml-training.csv")
#eliminating columns with more than 80% of the values in NAs
training <- training[,!colSums(is.na(training))>0.8*nrow(training)]
#transforming to numeric the kurtosis variables
training[,grep("kurtosis",names(training))] <- lapply(training[,grep("kurtosis",names(training))],as.numeric)
#transforming to numeric the skewness variables
training[,grep("skewness",names(training))] <- lapply(training[,grep("skewness",names(training))],as.numeric)
#eliminating the column "skewness_roll_belt.1""
training <- training[,names(training)!="skewness_roll_belt.1"]
#eliminating the variables max_yaw_XXX, min_yaw_XXX, amplitude_yaw_XXX
training <- training[,-grep("max_yaw",names(training))]
training <- training[,-grep("min_yaw",names(training))]
training <- training[,-grep("amplitude_yaw",names(training))]
#eliminating irrelevant variables for the analysis
training <- training[,names(training)!="user_name"]
training <- training[,-grep("timestamp",names(training))]
training <- training[,-grep("window",names(training))]
training <- training[,-1]
dim(training)
names(training)
predictors <- training[,-76]
names(predictors)
correlation_matrix <- cor(predictors)
correlation_matrix
high_correlation <- findCorrelation(correlation_matrix,cutoff=0.75)
high_correlation
high_correlation <- findCorrelation(correlation_matrix,cutoff=0.75,exact=TRUE)
high_correlation
high_correlation <- findCorrelation(correlation_matrix,cutoff=0.75,exact=FALSE)
high_correlation
high_correlation <- findCorrelation(correlation_matrix,cutoff=0.75)
high_correlation
predictors <- predictors[,-high_correlation]
names(predictors)
stopCluster(cluster)
library(parallel)
library(doParallel)
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
fitControl <- trainControl(method="cv",number=10,allowParallel=TRUE)
set.seed(12748)
system.time(modFit <- train(predictors,classe,data=training,method="rf",trControl=fitControl))
names(training)
mytraining <- training
mytraining <- predictors
mytraining$y <- training$classe
summary(mytraining)
system.time(modFit <- train(y ~.,data=mytraining,method="rf",trControl=fitControl))
modFit
modFit$finalModel
predict(modFit,testing)
predict(modFit,mytesting)
predict(model_euler,mytesting)
predict(model_lowcor,mytesting)
summary(mytesting)
predict(model_lowcor,mytesting)
predict(model_lowcor,testing)
predict(modFit,testing)
testing$kurtosis_roll_dumbbell <- as.numeric(testing$kurtosis_roll_dumbbell)
testing$skewness_roll_forearm <- as.numeric(testing$skewness_roll_forearm)
predict(modFit,testing)
summary(testing)
summary(mytesting)
predict(modFit,testing)
testing <- read.csv("./data/pml-testing.csv")
predict(modFit,testing)
testing[,grep("kurtosis",names(testing))] <- lapply(testing[,grep("kurtosis",names(testing))],as.numeric)
#transforming to numeric the skewness variables
testing[,grep("skewness",names(testing))] <- lapply(testing[,grep("skewness",names(testing))],as.numeric)
predict(modFit,testing)
summary(testing)
testing <- fix_na(testing)
summary(testing)
predict(modFit,testing)
predict(model_euler,testing)
predict(modFit,testing)
?createFolds
modFit
head(iris)
fit1 <- train(Species ~.,method="rf",data=iris)
fit1
names(training)
inValidation <- createDataPartition(y=training$classe,p=0.8,list=FALSE)
validation <- training[inValidation,]
inTrain <- createDataPartition(y=training$classe,p=0.8,list=FALSE)
training <- training[inTrain,]
?createFolds
training <- read.csv("./data/pml-training.csv")
training <- training[,!colSums(is.na(training))>0.8*nrow(training)]
#transforming to numeric the kurtosis variables
training[,grep("kurtosis",names(training))] <- lapply(training[,grep("kurtosis",names(training))],as.numeric)
#transforming to numeric the skewness variables
training[,grep("skewness",names(training))] <- lapply(training[,grep("skewness",names(training))],as.numeric)
#eliminating the column "skewness_roll_belt.1""
training <- training[,names(training)!="skewness_roll_belt.1"]
#eliminating the variables max_yaw_XXX, min_yaw_XXX, amplitude_yaw_XXX
training <- training[,-grep("max_yaw",names(training))]
training <- training[,-grep("min_yaw",names(training))]
training <- training[,-grep("amplitude_yaw",names(training))]
#eliminating irrelevant variables for the analysis
training <- training[,names(training)!="user_name"]
training <- training[,-grep("timestamp",names(training))]
training <- training[,-grep("window",names(training))]
training <- training[,-1]
dim(training)
folds <- createFolds(y=training$classe,k=25,list=FALSE,returnTrain=TRUE)
head(folds)
folds[1]
print(folds)
str(folds)
folds <- createFolds(training$classe)
str(folds)
folds <- createFolds(training$classe,k=25)
str(folds)
folds <- createFolds(y=training$classe,k=25,list=TRUE,returnTrain=TRUE)
folds
str(folds)
folds <- createFolds(training$classe,k=25)
str(folds)
modFit
knit2html("ml_project.Rmd")
library(knit)
library(knitr)
knit2html("ml_project.Rmd")
